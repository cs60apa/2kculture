"use client";

import { AdminDashboardLayout } from "@/components/admin-dashboard-layout";
import { Button } from "@/components/ui/button";
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card";
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs";
import { useQuery } from "convex/react";
import { api } from "@/convex/_generated/api";
import { useUser } from "@clerk/nextjs";
import { 
  BarChart, 
  CartesianGrid, 
  XAxis, 
  YAxis, 
  Tooltip, 
  Legend, 
  ResponsiveContainer, 
  AreaChart,
  Area
} from "recharts";
import { useMemo, useEffect } from "react";
import Link from "next/link";
import { ArrowUpRight, Disc3, ListMusic, Music, Plus, RefreshCw, Users } from "lucide-react";
import { useRouter } from "next/navigation";

export default function AdminPage() {
  const { user, isLoaded, isSignedIn } = useUser();
  const router = useRouter();
  
  // Redirect if not authenticated
  useEffect(() => {
    if (isLoaded && !isSignedIn) {
      router.push("/sign-in");
    }
  }, [isLoaded, isSignedIn, router]);
  
  // Get user's songs
  const userSongs = useQuery(api.music.getSongsByArtist, 
    user?.id ? { artistId: user.id } : "skip"
  );
  
  // Get public songs count
  const publishedSongs = useQuery(api.music.getPublishedSongsByArtist, 
    user?.id ? { artistId: user.id } : "skip"
  );
  
  // Get draft songs count
  const draftSongs = useQuery(api.music.getDraftSongsByArtist, 
    user?.id ? { artistId: user.id } : "skip"
  );

  // Calculate total plays
  const totalPlays = useMemo(() => {
    return userSongs?.reduce((acc, song) => acc + (song.plays || 0), 0) || 0;
  }, [userSongs]);
  
  // Calculate growth metrics (mock data for demo)
  const weeklyData = useMemo(() => {
    const days = ['Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat', 'Sun'];
    const currentDay = new Date().getDay(); // 0 is Sunday
    
    return Array.from({ length: 7 }, (_, i) => {
      const dayIndex = (currentDay - 6 + i) % 7;
      const day = days[dayIndex >= 0 ? dayIndex : dayIndex + 7];
      
      // Generate mock data with an upward trend
      const baseValue = Math.floor(Math.random() * 20) + 10;
      const trendFactor = 1 + (i * 0.15);
      
      return {
        day,
        plays: Math.floor(baseValue * trendFactor),
      };
    });
  }, []);

  // Get recent songs
  const recentSongs = useMemo(() => {
    if (!userSongs) return [];
    
    return [...userSongs]
      .sort((a, b) => (b._creationTime || 0) - (a._creationTime || 0))
      .slice(0, 5);
  }, [userSongs]);

  // Get top performing songs
  const topSongs = useMemo(() => {
    if (!userSongs) return [];
    
    return [...userSongs]
      .sort((a, b) => (b.plays || 0) - (a.plays || 0))
      .slice(0, 5);
  }, [userSongs]);

  if (!isLoaded || !isSignedIn) {
    return <div className="flex h-screen items-center justify-center">Loading...</div>;
  }
  
  return (
    <AdminDashboardLayout>
      <div className="flex items-center justify-between mb-8">
        <div>
          <h2 className="text-3xl font-bold tracking-tight">Dashboard</h2>
          <p className="text-muted-foreground">
            Welcome to your 2KCulture admin dashboard
          </p>
        </div>
        <Button asChild>
          <Link href="/admin/content-studio">
            <Plus className="mr-2 h-4 w-4" /> Upload New Song
          </Link>
        </Button>
      </div>
      
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4 mb-8">
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Songs</CardTitle>
            <ListMusic className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{userSongs?.length || 0}</div>
            <p className="text-xs text-muted-foreground">
              {publishedSongs?.length || 0} published, {draftSongs?.length || 0} drafts
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Total Plays</CardTitle>
            <Disc3 className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">{totalPlays.toLocaleString()}</div>
            <p className="text-xs text-muted-foreground">
              Lifetime plays across all songs
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Weekly Growth</CardTitle>
            <ArrowUpRight className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">+24%</div>
            <p className="text-xs text-muted-foreground">
              Compared to last week
            </p>
          </CardContent>
        </Card>
        
        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">Active Listeners</CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">1,203</div>
            <p className="text-xs text-muted-foreground">
              Unique listeners this month
            </p>
          </CardContent>
        </Card>
      </div>
      
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-7 mb-8">
        <Card className="col-span-4">
          <CardHeader>
            <CardTitle>Weekly Performance</CardTitle>
            <CardDescription>
              Play count for the last 7 days
            </CardDescription>
          </CardHeader>
          <CardContent className="h-80">
            <ResponsiveContainer width="100%" height="100%">
              <AreaChart
                data={weeklyData}
                margin={{ top: 10, right: 30, left: 0, bottom: 0 }}
              >
                <CartesianGrid strokeDasharray="3 3" />
                <XAxis dataKey="day" />
                <YAxis />
                <Tooltip />
                <Area 
                  type="monotone" 
                  dataKey="plays" 
                  stroke="#8884d8" 
                  fill="#8884d8" 
                  fillOpacity={0.3}
                />
              </AreaChart>
            </ResponsiveContainer>
          </CardContent>
        </Card>
        
        <Card className="col-span-3">
          <CardHeader>
            <CardTitle>Quick Actions</CardTitle>
            <CardDescription>
              Manage your content efficiently
            </CardDescription>
          </CardHeader>
          <CardContent>
            <div className="space-y-4">
              <div className="grid grid-cols-2 gap-4">
                <Button asChild className="w-full justify-start">
                  <Link href="/admin/content-studio">
                    <Music className="mr-2 h-4 w-4" /> 
                    Upload Song
                  </Link>
                </Button>
                <Button asChild variant="outline" className="w-full justify-start">
                  <Link href="/admin/all-songs">
                    <ListMusic className="mr-2 h-4 w-4" /> 
                    View All Songs
                  </Link>
                </Button>
              </div>
              
              <div className="grid grid-cols-2 gap-4">
                <Button asChild variant="outline" className="w-full justify-start">
                  <Link href="/admin/analytics">
                    <BarChart className="mr-2 h-4 w-4" /> 
                    View Analytics
                  </Link>
                </Button>
                <Button asChild variant="outline" className="w-full justify-start">
                  <Link href="/admin/settings">
                    <RefreshCw className="mr-2 h-4 w-4" /> 
                    Refresh Data
                  </Link>
                </Button>
              </div>
            </div>
          </CardContent>
        </Card>
      </div>
      
      <Tabs defaultValue="recent">
        <TabsList>
          <TabsTrigger value="recent">Recent Uploads</TabsTrigger>
          <TabsTrigger value="popular">Top Performing</TabsTrigger>
        </TabsList>
        
        <TabsContent value="recent" className="mt-6">
          {recentSongs.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {recentSongs.map((song) => (
                <Card key={song._id} className="overflow-hidden">
                  <div className="aspect-square relative">
                    {song.coverArt ? (
                      <img 
                        src={song.coverArt} 
                        alt={song.title} 
                        className="object-cover w-full h-full"
                      />
                    ) : (
                      <div className="w-full h-full bg-secondary flex items-center justify-center">
                        <Music className="h-12 w-12 text-muted-foreground" />
                      </div>
                    )}
                  </div>
                  <CardContent className="p-4">
                    <div className="font-medium line-clamp-1">{song.title}</div>
                    <div className="text-sm text-muted-foreground mt-1">
                      Uploaded {new Date(song._creationTime || 0).toLocaleDateString()}
                    </div>
                    <div className="flex items-center justify-between mt-2">
                      <div className="text-xs bg-secondary px-2 py-1 rounded-md">
                        {song.isPublic ? "Published" : "Draft"}
                      </div>
                      <div className="text-xs text-muted-foreground">
                        {song.plays || 0} plays
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : (
            <Card>
              <CardContent className="flex flex-col items-center justify-center py-10">
                <Music className="h-10 w-10 text-muted-foreground mb-4" />
                <p className="text-center text-muted-foreground">
                  You have not uploaded any songs yet.
                </p>
                <Button asChild className="mt-4">
                  <Link href="/admin/content-studio">
                    <Plus className="mr-2 h-4 w-4" /> Upload Your First Song
                  </Link>
                </Button>
              </CardContent>
            </Card>
          )}
        </TabsContent>
        
        <TabsContent value="popular" className="mt-6">
          {topSongs.length > 0 ? (
            <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
              {topSongs.map((song) => (
                <Card key={song._id} className="overflow-hidden">
                  <div className="aspect-square relative">
                    {song.coverArt ? (
                      <img 
                        src={song.coverArt} 
                        alt={song.title} 
                        className="object-cover w-full h-full"
                      />
                    ) : (
                      <div className="w-full h-full bg-secondary flex items-center justify-center">
                        <Music className="h-12 w-12 text-muted-foreground" />
                      </div>
                    )}
                  </div>
                  <CardContent className="p-4">
                    <div className="font-medium line-clamp-1">{song.title}</div>
                    <div className="text-sm text-muted-foreground mt-1">
                      {song.plays || 0} total plays
                    </div>
                    <div className="flex items-center justify-between mt-2">
                      <div className="text-xs bg-secondary px-2 py-1 rounded-md">
                        {song.isPublic ? "Published" : "Draft"}
                      </div>
                      <div className="text-xs text-muted-foreground">
                        Uploaded {new Date(song._creationTime || 0).toLocaleDateString()}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              ))}
            </div>
          ) : (
            <Card>
              <CardContent className="flex flex-col items-center justify-center py-10">
                <Music className="h-10 w-10 text-muted-foreground mb-4" />
                <p className="text-center text-muted-foreground">
                  You have not uploaded any songs yet.
                </p>
                <Button asChild className="mt-4">
                  <Link href="/admin/content-studio">
                    <Plus className="mr-2 h-4 w-4" /> Upload Your First Song
                  </Link>
                </Button>
              </CardContent>
            </Card>
          )}
        </TabsContent>
      </Tabs>
    </AdminDashboardLayout>
  );
}
